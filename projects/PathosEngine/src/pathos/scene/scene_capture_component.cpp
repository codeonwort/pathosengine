#include "scene_capture_component.h"
#include "scene.h"
#include "pathos/actor/world.h"
#include "pathos/actor/actor.h"
#include "pathos/render/render_deferred.h"
#include "pathos/render/render_device.h"
#include "pathos/render/render_target.h"
#include "pathos/render/scene_proxy.h"
#include "pathos/camera/camera.h"
#include "pathos/util/gl_debug_group.h"

namespace pathos {

	void SceneCaptureComponent::captureScene() {
		if (renderTarget == nullptr || renderTarget->isTextureValid() == false) {
			return;
		}

		DeferredRenderer* renderer = new DeferredRenderer;
		{
			SceneRenderSettings settings;
			settings.sceneWidth = renderTarget->getWidth();
			settings.sceneHeight = renderTarget->getHeight();
			settings.enablePostProcess = !captureHDR;
			renderer->setSceneRenderSettings(settings);
			renderer->setFinalRenderTarget(renderTarget);
		}

		Scene& scene = getOwner()->getWorld()->getScene();

		const float aspectRatio = (float)renderTarget->getWidth() / (float)renderTarget->getHeight();

		// #todo-renderer: Let Renderer::render() take a view family parameter, not a camera.
		Camera tempCamera(PerspectiveLens(fovY, aspectRatio, zNear, zFar));
		tempCamera.moveToPosition(getLocation());

		Rotator componentRotation = getRotation();
		tempCamera.setYaw(componentRotation.yaw);
		tempCamera.setPitch(componentRotation.pitch);

		const uint32 sceneCaptureFrameNumber = 0xffffffff; // #todo-renderthread-fatal: frameNumber for sceneCapture?
		SceneProxy* sceneProxy = scene.createRenderProxy(sceneCaptureFrameNumber, tempCamera);

		ScopedGpuCounter::enable = false;

		ENQUEUE_RENDER_COMMAND(
			[renderer, &sceneProxy](RenderCommandList& cmdList) {
				SCOPED_DRAW_EVENT(SceneCapture);

				renderer->render(cmdList, sceneProxy, &sceneProxy->camera);
			}
		);

		// #todo-scene-capture: Remove flush
		FLUSH_RENDER_COMMAND();

		ENQUEUE_RENDER_COMMAND(
			[renderer](RenderCommandList& cmdList) {
				// This destroys GL objects immediately, before render commands generated by renderer->render() are executed.
				renderer->releaseResources(cmdList);
			}
		);

		// #todo-scene-capture: Remove flush
		FLUSH_RENDER_COMMAND();

		ScopedGpuCounter::enable = true;

		delete renderer;

	}

}
